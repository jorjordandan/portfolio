/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState } from "react";
import { useGLTF } from "@react-three/drei";
import { useSpring, animated, config } from "@react-spring/three";


export function ChairTop(props) {
	const [active, setActive] = useState(false);

  const group = useRef();
  const { nodes, materials } = useGLTF("/chairTop.glb");



  const {  rotation} = useSpring({
    rotation: active ? 0 : -2,
    config: {mass: 1,
    friction: 100,
    tension: 170}
  });

  return (
    <group ref={group} {...props} dispose={null} onClick={() => setActive(!active)}>
      <animated.group position={[-0.36, 0.2, -0.26]}  rotation-y={rotation}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162.geometry}
          material={materials["gray fabirc mesh"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_1.geometry}
          material={materials["white plastic"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_2.geometry}
          material={materials["black plastic"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_3.geometry}
          material={materials["gray pjlastic"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_4.geometry}
          material={materials.Black_base}
        />
      </animated.group>
    </group>
  );
}

useGLTF.preload("/chairTop.glb");


export function ChairTops(props) {
  const [active, setActive] = useState(false);
  const group = useRef();
  const { nodes, materials } = useGLTF("/chair3.glb");
  // const active = props.active;

  const { scale, rotation, position } = useSpring({
    rotation: active ? 1 : 2,
    config: config.wobbly,
  });

  return (
    <animated.group
      ref={group}
      {...props}
      rotation-y={rotation}
      onClick={() => setActive(!active)}
      dispose={null}
    >
      <group position={[-0.36, 0.2, -0.26]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162.geometry}
          material={nodes.Cylinder162.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_1.geometry}
          material={nodes.Cylinder162_1.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_2.geometry}
          material={nodes.Cylinder162_2.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_3.geometry}
          material={materials["gray pjlastic"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder162_4.geometry}
          material={materials.Black_base}
        />
      </group>
    </animated.group>
  );
}

export default function Model(props) {
  const group = useRef();
  const { nodes, materials } = useGLTF("/chair3.glb");
  return (
    <group ref={group} {...props} dispose={null}>
      <group position={[-0.36, 0.2, -0.26]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder015.geometry}
          material={nodes.Cylinder015.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder015_1.geometry}
          material={nodes.Cylinder015_1.material}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Cylinder015_2.geometry}
          material={nodes.Cylinder015_2.material}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/chair3.glb");
