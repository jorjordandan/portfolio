/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";

type GLTFResult = GLTF & {
  nodes: {
    Cube001: THREE.Mesh;
    Curve021: THREE.Mesh;
    Curve024: THREE.Mesh;
    Curve027: THREE.Mesh;
    Curve028: THREE.Mesh;
    Cylinder017: THREE.Mesh;
    Cylinder018: THREE.Mesh;
    hingle: THREE.Mesh;
    bottom_blocker: THREE.Mesh;
    center_pin: THREE.Mesh;
    Curve025: THREE.Mesh;
    Curve026_1: THREE.Mesh;
    Curve031: THREE.Mesh;
    Curve032_1: THREE.Mesh;
    lid: THREE.Mesh;
    lower_disk: THREE.Mesh;
    rim: THREE.Mesh;
    upper_disk: THREE.Mesh;
  };
  materials: {
    Material: THREE.MeshStandardMaterial;
    Red: THREE.MeshStandardMaterial;
    Blue: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    Gold: THREE.MeshStandardMaterial;
    Gray: THREE.MeshStandardMaterial;
    ["Gray.001"]: THREE.MeshStandardMaterial;
  };
};

export const  InvPuzzleBox = React.forwardRef((props, ref) => {
  // const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF("/InvPuzzlebox.glb") as GLTFResult;
  return (
    <group ref={ref} {...props} dispose={null}>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cube001.geometry}
        material={nodes.Cube001.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve021.geometry}
        material={nodes.Curve021.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve024.geometry}
        material={nodes.Curve024.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve027.geometry}
        material={nodes.Curve027.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Curve028.geometry}
        material={nodes.Curve028.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder017.geometry}
        material={nodes.Cylinder017.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Cylinder018.geometry}
        material={nodes.Cylinder018.material}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.hingle.geometry}
        material={nodes.hingle.material}
        position={[-0.04, 0.92, -0.87]}
      >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.bottom_blocker.geometry}
          material={nodes.bottom_blocker.material}
          position={[0, 0.47, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.center_pin.geometry}
          material={nodes.center_pin.material}
          position={[0, 0.54, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Curve025.geometry}
          material={nodes.Curve025.material}
          position={[0.03, 0.48, 0.72]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Curve026_1.geometry}
          material={nodes.Curve026_1.material}
          position={[-0.03, 0.48, 1.71]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Curve031.geometry}
          material={nodes.Curve031.material}
          position={[-0.65, 0.48, 0.95]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Curve032_1.geometry}
          material={nodes.Curve032_1.material}
          position={[0.34, 0.48, 0.95]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.lid.geometry}
          material={nodes.lid.material}
          position={[0, 0.24, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.lower_disk.geometry}
          material={materials.Gray}
          position={[0, 0.51, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.rim.geometry}
          material={nodes.rim.material}
          position={[0, 0.51, 1]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.upper_disk.geometry}
          material={materials["Gray.001"]}
          position={[0, 0.55, 1]}
        />
      </mesh>
    </group>
  );
})

useGLTF.preload("/InvPuzzlebox.glb");
